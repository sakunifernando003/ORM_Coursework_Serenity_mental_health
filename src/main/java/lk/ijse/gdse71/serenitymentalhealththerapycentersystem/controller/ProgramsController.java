package lk.ijse.gdse71.serenitymentalhealththerapycentersystem.controller;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.AnchorPane;
import lk.ijse.gdse71.serenitymentalhealththerapycentersystem.bo.custom.ProgramBO;
import lk.ijse.gdse71.serenitymentalhealththerapycentersystem.bo.custom.impl.ProgramBOImpl;
import lk.ijse.gdse71.serenitymentalhealththerapycentersystem.dto.PatientDTO;
import lk.ijse.gdse71.serenitymentalhealththerapycentersystem.dto.TherapyProgramDTO;
import lk.ijse.gdse71.serenitymentalhealththerapycentersystem.dto.tm.PatientTM;
import lk.ijse.gdse71.serenitymentalhealththerapycentersystem.dto.tm.TherapyProgramTM;

import javafx.scene.input.MouseEvent;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.ResourceBundle;

public class ProgramsController implements Initializable {

    @FXML
    private Button btnDelete;

    @FXML
    private Button btnReset;

    @FXML
    private Button btnSave;

    @FXML
    private Button btnUpdate;

    @FXML
    private TableColumn<TherapyProgramTM, String> colDuration;

    @FXML
    private TableColumn<TherapyProgramTM, Double> colFee;

    @FXML
    private TableColumn<TherapyProgramTM, String> colProgramId;

    @FXML
    private TableColumn<TherapyProgramTM, String> colProgramName;

    @FXML
    private Label lblAutoGeneratedId;

    @FXML
    private Label lblDuration;

    @FXML
    private Label lblFee;

    @FXML
    private Label lblName;

    @FXML
    private TableView<TherapyProgramTM> programTable;

    @FXML
    private AnchorPane programsAnchorPane;

    @FXML
    private TextField txtDuration;

    @FXML
    private TextField txtFee;

    @FXML
    private TextField txtName;

    @FXML
    private TextField txtSearch;

    ProgramBO programBO = new ProgramBOImpl();

    @FXML
    void deleteBtnOnAction(ActionEvent event) {
        String programId = lblAutoGeneratedId.getText();

        Alert alert = new Alert(Alert.AlertType.CONFIRMATION, "Do you want to delete this Program?", ButtonType.YES, ButtonType.NO);
        Optional<ButtonType> optionalButtonType = alert.showAndWait();

        if(optionalButtonType.isPresent() && optionalButtonType.get() == ButtonType.YES) {
            boolean isDeleted = programBO.deleteProgram(programId);
            if(isDeleted) {
                refreshPage();
                new Alert(Alert.AlertType.INFORMATION, "Program deleted Successfully").show();
            }else{
                new Alert(Alert.AlertType.ERROR, "Failed to delete program").show();
            }
        }
    }

    @FXML
    void resetBtnOnAction(ActionEvent event) {
        refreshPage();
    }

    @FXML
    void saveBtnOnAction(ActionEvent event) {
        String id = lblAutoGeneratedId.getText();
        String programName = txtName.getText();
        String duration = txtDuration.getText();
        String fee = txtFee.getText();

        String namePattern = "^[A-Za-z ]+$";
        String nicPattern = "^[0-9]{9}[vVxX]$|^[0-9]{12}$";
        String emailPattern = "^[\\w!#$%&'*+/=?`{|}~^-]+(?:\\.[\\w!#$%&'*+/=?`{|}~^-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,6}$";

        boolean hasErrors = false;
        StringBuilder errorMessage = new StringBuilder("Please correct the following errors:\n");

        String errorStyle = "-fx-border-color: red; -fx-text-fill: white; -fx-background-color: transparent;";
        String defaultStyle = "-fx-border-color: green; -fx-text-fill: white; -fx-background-color: transparent;";

        if (programName.isEmpty() || !programName.matches(namePattern)) {
            txtName.setStyle(errorStyle);
            errorMessage.append("- Name is empty or in an incorrect format\n");
            hasErrors = true;

        }else{
            txtName.setStyle(defaultStyle);
        }

        if (duration.isEmpty()) {
            txtDuration.setStyle(errorStyle);
            errorMessage.append("- Duration is empty\n");
            hasErrors = true;

        }else{
            txtDuration.setStyle(defaultStyle);
        }

        double programFee = -1;
        try {
            programFee = Double.parseDouble(fee);
            txtFee.setStyle(defaultStyle);
        } catch (NumberFormatException e) {
            txtFee.setStyle(errorStyle);
            errorMessage.append("- Program Fee  is empty or not a valid \n");
            hasErrors = true;
        }
        if (hasErrors) {
            new Alert(Alert.AlertType.ERROR, errorMessage.toString()).show();
            return;
        }

        boolean isSaved = programBO.saveProgram(new TherapyProgramDTO(id ,programName , duration , programFee));
        if (isSaved) {
            refreshPage();
            new Alert(Alert.AlertType.INFORMATION, "Program saved successfully!").show();
        } else {
            new Alert(Alert.AlertType.ERROR, "Failed to save program!").show();
        }

    }

    @FXML
    void updateBtnOnAction(ActionEvent event) {
        String id = lblAutoGeneratedId.getText();
        String programName = txtName.getText();
        String duration = txtDuration.getText();
        String fee = txtFee.getText();

        String namePattern = "^[A-Za-z ]+$";
        String nicPattern = "^[0-9]{9}[vVxX]$|^[0-9]{12}$";
        String emailPattern = "^[\\w!#$%&'*+/=?`{|}~^-]+(?:\\.[\\w!#$%&'*+/=?`{|}~^-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,6}$";

        boolean hasErrors = false;
        StringBuilder errorMessage = new StringBuilder("Please correct the following errors:\n");

        String errorStyle = "-fx-border-color: red; -fx-text-fill: black; -fx-background-color: white;-fx-border-width: 2px;";
        String defaultStyle = "-fx-border-color:  #1E90FF; -fx-text-fill: black; -fx-background-color: white;-fx-border-width: 2px;";

        if (programName.isEmpty() || !programName.matches(namePattern)) {
            txtName.setStyle(errorStyle);
            errorMessage.append("- Name is empty or in an incorrect format\n");
            hasErrors = true;

        }else{
            txtName.setStyle(defaultStyle);
        }

        if (duration.isEmpty()) {
            txtDuration.setStyle(errorStyle);
            errorMessage.append("- Duration is empty\n");
            hasErrors = true;

        }else{
            txtDuration.setStyle(defaultStyle);
        }

        double programFee = -1;
        try {
            programFee = Double.parseDouble(fee);
            txtFee.setStyle(defaultStyle);
        } catch (NumberFormatException e) {
            txtFee.setStyle(errorStyle);
            errorMessage.append("- Program Fee  is empty or not a valid \n");
            hasErrors = true;
        }
        if (hasErrors) {
            new Alert(Alert.AlertType.ERROR, errorMessage.toString()).show();
            return;
        }

        boolean isUpdated = programBO.updateProgram(new TherapyProgramDTO(id ,programName , duration , programFee));
        if (isUpdated) {
            refreshPage();
            new Alert(Alert.AlertType.INFORMATION, "Program updated successfully!").show();
        } else {
            new Alert(Alert.AlertType.ERROR, "Failed to update program!").show();
        }
    }

    @FXML
    void clickedTable(MouseEvent event) {
        TherapyProgramTM programTM = programTable.getSelectionModel().getSelectedItem();
        if (programTM != null) {
            lblAutoGeneratedId.setText(programTM.getProgramId());
            txtName.setText(programTM.getProgramName());
            txtDuration.setText(programTM.getDuration());
            txtFee.setText(String.valueOf(programTM.getFee()));

            btnSave.setDisable(true);
            btnDelete.setDisable(false);
            btnUpdate.setDisable(false);
        }
    }


    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        colProgramId.setCellValueFactory(new PropertyValueFactory<>("programId"));
        colProgramName.setCellValueFactory(new PropertyValueFactory<>("programName"));
        colDuration.setCellValueFactory(new PropertyValueFactory<>("duration"));
        colFee.setCellValueFactory(new PropertyValueFactory<>("fee"));

        String defaultStyle = "-fx-border-color:  #1E90FF; -fx-text-fill: black; -fx-background-color: white; -fx-border-width: 2px;";

        txtName.setStyle(defaultStyle);
        txtDuration.setStyle(defaultStyle);
        txtFee.setStyle(defaultStyle);


        txtSearch.setOnAction(event ->{
            try{
                searchProgram();
            }catch (Exception e){
                e.printStackTrace();
                new Alert(Alert.AlertType.ERROR, "Error searching program").show();
            }
        });

        try{
            refreshPage();
        }catch (Exception e){
            e.printStackTrace();
            new Alert(Alert.AlertType.ERROR, "Fail to load program id").show();
        }
    }

    private void refreshPage() {
        loadNextProgramId();
        loadTableData();

        btnSave.setDisable(false);
        btnDelete.setDisable(true);
        btnUpdate.setDisable(true);

        txtName.setText("");
        txtDuration.setText("");
        txtFee.setText("");

        String defaultStyle = "-fx-border-color:  #1E90FF; -fx-text-fill: black; -fx-background-color: white; -fx-border-width: 2px;";

        txtName.setStyle(defaultStyle);
        txtDuration.setStyle(defaultStyle);
        txtFee.setStyle(defaultStyle);
    }

    private void loadTableData() {
        ArrayList<TherapyProgramDTO> programDTOS = programBO.getAllPrograms();
        ObservableList<TherapyProgramTM> programTMS = FXCollections.observableArrayList();

        for(TherapyProgramDTO programDTO : programDTOS){
            TherapyProgramTM programTM = new TherapyProgramTM(
                    programDTO.getId(),
                    programDTO.getProgramName(),
                    programDTO.getDuration(),
                    programDTO.getFee()

            );
            programTMS.add(programTM);
        }
        programTable.setItems(programTMS);
    }

    private void loadNextProgramId() {
        String nextProgramId = programBO.getNextProgramId();
        lblAutoGeneratedId.setText(nextProgramId);
    }

    private void searchProgram() {
        String searchText = txtSearch.getText().trim();

        programBO.searchProgram(searchText);

        if(searchText.isEmpty()){
            loadTableData();
            return;
        }
        List<TherapyProgramDTO> programDTOS = programBO.searchProgram(searchText);
        ObservableList<TherapyProgramTM> programTMS = FXCollections.observableArrayList();

        for(TherapyProgramDTO programDTO : programDTOS){
            TherapyProgramTM programTM = new TherapyProgramTM(
                    programDTO.getId(),
                    programDTO.getProgramName(),
                    programDTO.getDuration(),
                    programDTO.getFee()

            );
            programTMS.add(programTM);
        }
        programTable.setItems(programTMS);
    }
}
