package lk.ijse.gdse71.serenitymentalhealththerapycentersystem.controller;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import lk.ijse.gdse71.serenitymentalhealththerapycentersystem.bo.custom.ProgramBO;
import lk.ijse.gdse71.serenitymentalhealththerapycentersystem.bo.custom.TherapistBO;
import lk.ijse.gdse71.serenitymentalhealththerapycentersystem.bo.custom.impl.ProgramBOImpl;
import lk.ijse.gdse71.serenitymentalhealththerapycentersystem.bo.custom.impl.TherapistBOImpl;
import lk.ijse.gdse71.serenitymentalhealththerapycentersystem.dto.PatientDTO;
import lk.ijse.gdse71.serenitymentalhealththerapycentersystem.dto.TherapistDTO;
import lk.ijse.gdse71.serenitymentalhealththerapycentersystem.dto.TherapyProgramDTO;
import lk.ijse.gdse71.serenitymentalhealththerapycentersystem.dto.tm.PatientTM;
import lk.ijse.gdse71.serenitymentalhealththerapycentersystem.dto.tm.TherapistTM;
import lk.ijse.gdse71.serenitymentalhealththerapycentersystem.entity.TherapyProgram;

import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.ResourceBundle;

public class TherapistController implements Initializable {

    @FXML
    private Button btnDelete;

    @FXML
    private Button btnReset;

    @FXML
    private Button btnSave;

    @FXML
    private Button btnUpdate;

    @FXML
    private ComboBox cmbPrograms;

    @FXML
    private TableColumn<TherapistTM, String> colProgram;

    @FXML
    private TableColumn<TherapistTM, String> colProgramId;


    @FXML
    private TableColumn<TherapistTM, String> colTherapistAddress;

    @FXML
    private TableColumn<TherapistTM, String> colTherapistId;

    @FXML
    private TableColumn<TherapistTM, Integer> colTherapistMobile;

    @FXML
    private TableColumn<TherapistTM, String> colTherapistName;

    @FXML
    private TableColumn<TherapistTM, String> colTherapistNic;

    @FXML
    private Label lblAddress;

    @FXML
    private Label lblAutoGeneratedId;

    @FXML
    private Label lblId;

    @FXML
    private Label lblProgramId;

    @FXML
    private Label lblMobile;

    @FXML
    private Label lblName;

    @FXML
    private Label lblNic;

    @FXML
    private Label lblProgram;

    @FXML
    private AnchorPane therapistAnchorPane;

    @FXML
    private TableView<TherapistTM> therapistTable;

    @FXML
    private TextField txtAddress;

    @FXML
    private TextField txtMobile;

    @FXML
    private TextField txtName;

    @FXML
    private TextField txtNic;

    @FXML
    private TextField txtSearch;

    TherapistBO therapistBO = new TherapistBOImpl();
    ProgramBO programBO = new ProgramBOImpl();

    @FXML
    void deleteBtnOnAction(ActionEvent event) {
        String therapistId = lblAutoGeneratedId.getText();

        Alert alert = new Alert(Alert.AlertType.CONFIRMATION, "Do you want to delete this Therapist?", ButtonType.YES, ButtonType.NO);
        Optional<ButtonType> optionalButtonType = alert.showAndWait();

        if(optionalButtonType.isPresent() && optionalButtonType.get() == ButtonType.YES) {
            boolean isDeleted = therapistBO.deleteTherapist(therapistId);
            if(isDeleted) {
                refreshPage();
                new Alert(Alert.AlertType.INFORMATION, "Therapist deleted Successfully").show();
            }else{
                new Alert(Alert.AlertType.ERROR, "Failed to delete therapist").show();
            }
        }
    }

    @FXML
    void resetBtnOnAction(ActionEvent event) {
        refreshPage();
    }

    @FXML
    void saveBtnOnAction(ActionEvent event) {
        String id = lblAutoGeneratedId.getText();
        String name = txtName.getText();
        String nic = txtNic.getText();
        String address = txtAddress.getText();
        String mobile = txtMobile.getText();

        String programName = (String) cmbPrograms.getValue();
        String programId = lblProgramId.getText();

        String namePattern = "^[A-Za-z ]+$";
        String nicPattern = "^[0-9]{9}[vVxX]$|^[0-9]{12}$";
        String emailPattern = "^[\\w!#$%&'*+/=?`{|}~^-]+(?:\\.[\\w!#$%&'*+/=?`{|}~^-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,6}$";

        boolean hasErrors = false;
        StringBuilder errorMessage = new StringBuilder("Please correct the following errors:\n");

        String errorStyle = "-fx-border-color: red; -fx-text-fill: black; -fx-background-color: white;";
        String defaultStyle = "-fx-border-color:  #1E90FF; -fx-text-fill: black; -fx-background-color: white;";

        if (name.isEmpty() || !name.matches(namePattern)) {
            txtName.setStyle(errorStyle);
            errorMessage.append("- Name is empty or in an incorrect format\n");
            hasErrors = true;

        }else{
            txtName.setStyle(defaultStyle);
        }
        if (address.isEmpty()) {
            txtAddress.setStyle(errorStyle);
            errorMessage.append("- Address is empty\n");
            hasErrors = true;

        }else{
            txtAddress.setStyle(defaultStyle);
        }

        int phone = -1;
        try {
            phone = Integer.parseInt(mobile);
            txtMobile.setStyle(defaultStyle);
        } catch (NumberFormatException e) {
            txtMobile.setStyle(errorStyle);
            errorMessage.append("- Phone number is empty or not a valid number\n");
            hasErrors = true;
        }

        if (nic.isEmpty() || !nic.matches(nicPattern)) {
            txtNic.setStyle(errorStyle);
            errorMessage.append("- NIC is empty or in an incorrect format\n");
            hasErrors = true;

        }else{
            txtNic.setStyle(defaultStyle);
        }


        if (hasErrors) {
            new Alert(Alert.AlertType.ERROR, errorMessage.toString()).show();
            return;
        }

        if(programName == null){
            new Alert(Alert.AlertType.ERROR, "Please select a program").show();
            return;
        }

        boolean isSaved = therapistBO.saveTherapist(new TherapistDTO(id , programId , name , address , phone , nic ));
        if (isSaved) {
            refreshPage();
            new Alert(Alert.AlertType.INFORMATION, "Therapist saved successfully!").show();
        } else {
            new Alert(Alert.AlertType.ERROR, "Failed to save therapist!").show();
        }

    }

    @FXML
    void updateBtnOnAction(ActionEvent event) {
        String id = lblAutoGeneratedId.getText();
        String name = txtName.getText();
        String nic = txtNic.getText();
        String address = txtAddress.getText();
        String mobile = txtMobile.getText();

        String programName = (String) cmbPrograms.getValue();
        String programId = lblProgramId.getText();

        if(programName == null){
            new Alert(Alert.AlertType.ERROR, "Please select a program").show();
            return;
        }

        String namePattern = "^[A-Za-z ]+$";
        String nicPattern = "^[0-9]{9}[vVxX]$|^[0-9]{12}$";
        String emailPattern = "^[\\w!#$%&'*+/=?`{|}~^-]+(?:\\.[\\w!#$%&'*+/=?`{|}~^-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,6}$";

        boolean hasErrors = false;
        StringBuilder errorMessage = new StringBuilder("Please correct the following errors:\n");

        String errorStyle = "-fx-border-color: red; -fx-text-fill: black; -fx-background-color: white;-fx-border-width: 2px;";
        String defaultStyle = "-fx-border-color:  #1E90FF; -fx-text-fill: black; -fx-background-color: white;-fx-border-width: 2px;";

        if (name.isEmpty() || !name.matches(namePattern)) {
            txtName.setStyle(errorStyle);
            errorMessage.append("- Name is empty or in an incorrect format\n");
            hasErrors = true;

        }else{
            txtName.setStyle(defaultStyle);
        }
        if (address.isEmpty()) {
            txtAddress.setStyle(errorStyle);
            errorMessage.append("- Address is empty\n");
            hasErrors = true;

        }else{
            txtAddress.setStyle(defaultStyle);
        }

        int phone = -1;
        try {
            phone = Integer.parseInt(mobile);
            txtMobile.setStyle(defaultStyle);
        } catch (NumberFormatException e) {
            txtMobile.setStyle(errorStyle);
            errorMessage.append("- Phone number is empty or not a valid number\n");
            hasErrors = true;
        }

        if (nic.isEmpty() || !nic.matches(nicPattern)) {
            txtNic.setStyle(errorStyle);
            errorMessage.append("- NIC is empty or in an incorrect format\n");
            hasErrors = true;

        }else{
            txtNic.setStyle(defaultStyle);
        }


        if (hasErrors) {
            new Alert(Alert.AlertType.ERROR, errorMessage.toString()).show();
            return;
        }

        boolean isUpdated = therapistBO.updateTherapist(new TherapistDTO(id , programId , name , address , phone , nic ));
        if (isUpdated) {
            refreshPage();
            new Alert(Alert.AlertType.INFORMATION, "Therapist updated successfully!").show();
        } else {
            new Alert(Alert.AlertType.ERROR, "Failed to update therapist!").show();
        }
    }
    @FXML
    void clickedTable(MouseEvent event) {
        TherapistTM therapistTM = therapistTable.getSelectionModel().getSelectedItem();
        if (therapistTM != null) {
            lblAutoGeneratedId.setText(therapistTM.getTherapistId());
            txtName.setText(therapistTM.getName());
            txtAddress.setText(therapistTM.getAddress());
            txtNic.setText(therapistTM.getNic());
            txtMobile.setText(String.valueOf(therapistTM.getMobile()));
            cmbPrograms.setValue(therapistTM.getProgram());
            lblProgramId.setText(therapistTM.getProgramId());
        }

        btnSave.setDisable(true);
        btnDelete.setDisable(false);
        btnUpdate.setDisable(false);
    }

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        colTherapistId.setCellValueFactory(new PropertyValueFactory<>("therapistId"));
        colTherapistName.setCellValueFactory(new PropertyValueFactory<>("name"));
        colTherapistAddress.setCellValueFactory(new PropertyValueFactory<>("address"));
        colTherapistNic.setCellValueFactory(new PropertyValueFactory<>("nic"));
        colTherapistMobile.setCellValueFactory(new PropertyValueFactory<>("mobile"));
        colProgram.setCellValueFactory(new PropertyValueFactory<>("program"));
        colProgramId.setCellValueFactory(new PropertyValueFactory<>("programId"));

        String defaultStyle = "-fx-border-color:  #1E90FF; -fx-text-fill: black; -fx-background-color: white; -fx-border-width: 2px;";

        txtName.setStyle(defaultStyle);
        txtAddress.setStyle(defaultStyle);
        txtMobile.setStyle(defaultStyle);
        txtNic.setStyle(defaultStyle);
        cmbPrograms.setStyle(defaultStyle);

        txtSearch.setOnAction(event -> {
            try {
                searchTherapist();
            } catch (Exception e) {
                e.printStackTrace();
                new Alert(Alert.AlertType.ERROR, "Error searching therapist").show();
            }
        });

        try {
            loadProgramNames();
            refreshPage();

        } catch (Exception e) {
            e.printStackTrace();
            new Alert(Alert.AlertType.ERROR, "Fail to load therapist id").show();
        }
    }

    private void loadProgramNames() {
        ArrayList<String> programNames = programBO.getAllProgramsNames();
        cmbPrograms.setItems(FXCollections.observableArrayList(programNames));
    }


    private void refreshPage() {
        loadNextTherapistId();
        loadTableData();

        btnSave.setDisable(false);
        btnDelete.setDisable(true);
        btnUpdate.setDisable(true);

        txtName.setText("");
        txtAddress.setText("");
        txtMobile.setText("");
        txtNic.setText("");
        lblProgramId.setText("");

        cmbPrograms.getSelectionModel().clearSelection();
        cmbPrograms.setValue(null);

        String defaultStyle = "-fx-border-color:  #1E90FF; -fx-text-fill: black; -fx-background-color: white; -fx-border-width: 2px;";

        txtName.setStyle(defaultStyle);
        txtAddress.setStyle(defaultStyle);
        txtMobile.setStyle(defaultStyle);
        txtNic.setStyle(defaultStyle);
        cmbPrograms.setStyle(defaultStyle);

    }

    private void loadTableData() {
        ArrayList<TherapistDTO> therapistDTOS = therapistBO.getAllTherapist();
        ObservableList<TherapistTM> therapistTMS = FXCollections.observableArrayList();

        for(TherapistDTO therapistDTO : therapistDTOS) {

            String programName = programBO.getProgramNameById(therapistDTO.getProgramId());

            TherapistTM therapistTM = new TherapistTM(
                    therapistDTO.getId(),
                    therapistDTO.getName(),
                    therapistDTO.getAddress(),
                    therapistDTO.getNic(),
                    therapistDTO.getMobileNumber(),
                    programName,
                    therapistDTO.getProgramId()
            );
            therapistTMS.add(therapistTM);
        }
        therapistTable.setItems(therapistTMS);

    }

    private void loadNextTherapistId() {
        String nextTherapistId = therapistBO.getNextTherapistId();
        lblAutoGeneratedId.setText(nextTherapistId);
    }

    private void searchTherapist() {
        String searchText = txtSearch.getText().trim();

        therapistBO.searchTherapist(searchText);

        if(searchText.isEmpty()){
            loadTableData();
            return;
        }
        List<TherapistDTO> therapistDTOS = therapistBO.searchTherapist(searchText);
        ObservableList<TherapistTM> therapistTMS = FXCollections.observableArrayList();

        for(TherapistDTO therapistDTO : therapistDTOS) {

            String programName = programBO.getProgramNameById(therapistDTO.getProgramId());

            TherapistTM therapistTM = new TherapistTM(
                    therapistDTO.getId(),
                    therapistDTO.getName(),
                    therapistDTO.getAddress(),
                    therapistDTO.getNic(),
                    therapistDTO.getMobileNumber(),
                    programName,
                    therapistDTO.getProgramId()
            );
            therapistTMS.add(therapistTM);
        }
        therapistTable.setItems(therapistTMS);
    }

    @FXML
    void selectPrograms(ActionEvent event) {
        try{
            String selectedProgramName = (String) cmbPrograms.getSelectionModel().getSelectedItem();
            if(selectedProgramName != null) {
                String programId = programBO.getProgramIdByName(selectedProgramName);
                lblProgramId.setText(programId);
            }
        }catch(Exception e){
            e.printStackTrace();
            new Alert(Alert.AlertType.ERROR, "Fail to load program id").show();
        }
    }

}
