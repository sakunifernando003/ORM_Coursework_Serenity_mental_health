package lk.ijse.gdse71.serenitymentalhealththerapycentersystem.controller;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.VBox;
import lk.ijse.gdse71.serenitymentalhealththerapycentersystem.bo.custom.*;
import lk.ijse.gdse71.serenitymentalhealththerapycentersystem.bo.custom.impl.*;
import lk.ijse.gdse71.serenitymentalhealththerapycentersystem.dto.PaymentDTO;
import lk.ijse.gdse71.serenitymentalhealththerapycentersystem.dto.TherapistDTO;
import lk.ijse.gdse71.serenitymentalhealththerapycentersystem.dto.TherapySessionDTO;
import lk.ijse.gdse71.serenitymentalhealththerapycentersystem.dto.tm.TherapistTM;
import lk.ijse.gdse71.serenitymentalhealththerapycentersystem.dto.tm.TherapySessionTM;

import java.net.URL;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.ResourceBundle;

public class SessionController implements Initializable {

    @FXML
    private Button btnDelete;

    @FXML
    private Button btnReset;

    @FXML
    private Button btnSave;

    @FXML
    private Button btnUpdate;

    @FXML
    private ComboBox cmbPatients;

    @FXML
    private ComboBox cmbPrograms;

    @FXML
    private ComboBox cmbStatus;

    @FXML
    private ComboBox cmbTherapist;

    @FXML
    private TableColumn<TherapySessionTM, LocalDate> colDate;

    @FXML
    private TableColumn<TherapySessionTM, String> colPatientId;

    @FXML
    private TableColumn<TherapySessionTM, String> colPatinet;

    @FXML
    private TableColumn<TherapySessionTM, String> colProgram;

    @FXML
    private TableColumn<TherapySessionTM, String> colProgramId;

    @FXML
    private TableColumn<TherapySessionTM, LocalDate> colSessionDate;

    @FXML
    private TableColumn<TherapySessionTM, String> colSessionId;

    @FXML
    private TableColumn<TherapySessionTM, String> colTherapist;

    @FXML
    private TableColumn<TherapySessionTM, String> colTherapistId;

    @FXML
    private DatePicker datePickerForSession;

    @FXML
    private Label lblAutoGeneratedId;

    @FXML
    private Label lblDate;

    @FXML
    private Label lblDesc;

    @FXML
    private Label lblPatient;

    @FXML
    private Label lblPatientId;

    @FXML
    private Label lblPaymentId;

    @FXML
    private Label lblProgram;

    @FXML
    private Label lblProgramId;

    @FXML
    private Label lblRemainingAmount;

    @FXML
    private Label lblSessionDate;

    @FXML
    private Label lblTherapist;

    @FXML
    private Label lblTherapistId;

    @FXML
    private Label paymentTopic;

    @FXML
    private VBox paymentVBox;

    @FXML
    private AnchorPane sessionAnchorPane;

    @FXML
    private TableView<TherapySessionTM> sessionTable;

    @FXML
    private TextField txtAmount;

    @FXML
    private TextField txtDesc;

    @FXML
    private TextField txtSearch;

    @FXML
    private TextField txtPaymentDesc;

    ProgramBO programBO = new ProgramBOImpl();
    PatientBO patientBO = new PatientBOImpl();
    TherapistBO therapistBO = new TherapistBOImpl();
    TherapySessionBO therapySessionBO = new TherapySessionBOImpl();
    PaymentBO paymentBO = new PaymentBOImpl();
    BookAppointmentBO bookAppointmentBO = new BookAppoinmentBOImpl();
    RegistrationBO registrationBO = new RegistrationBOImpl();

    @FXML
    void clickedTable(MouseEvent event) {
        TherapySessionTM therapySessionTM = sessionTable.getSelectionModel().getSelectedItem();
        if(therapySessionTM != null) {
            lblAutoGeneratedId.setText(therapySessionTM.getSessionId());
            lblDate.setText(String.valueOf(therapySessionTM.getDate()));
            lblPatient.setText(therapySessionTM.getPatientId());
            lblProgramId.setText(therapySessionTM.getProgramId());
            lblTherapistId.setText(therapySessionTM.getTherapistId());
            cmbPatients.setValue(therapySessionTM.getPatient());
            cmbPrograms.setValue(therapySessionTM.getProgram());
            cmbTherapist.setValue(therapySessionTM.getTherapist());
            datePickerForSession.setValue(therapySessionTM.getSessionDate());

        }

        lblRemainingAmount.setText("");
        txtAmount.setDisable(true);
        txtPaymentDesc.setDisable(true);
        cmbStatus.setDisable(true);

        btnSave.setDisable(true);
        btnDelete.setDisable(false);
        btnUpdate.setDisable(false);
    }

    @FXML
    void deleteBtnOnAction(ActionEvent event) {
        String sessionId = lblAutoGeneratedId.getText();
        System.out.println("sessionId: " + sessionId);

        Alert alert = new Alert(Alert.AlertType.CONFIRMATION, "Do you want to delete this Record?", ButtonType.YES, ButtonType.NO);
        Optional<ButtonType> optionalButtonType = alert.showAndWait();

        if(optionalButtonType.isPresent() && optionalButtonType.get() == ButtonType.YES) {
            boolean isDeleted = therapySessionBO.deleteSession(sessionId);
            if(isDeleted) {
                refreshPage();
                new Alert(Alert.AlertType.INFORMATION, "Record deleted Successfully").show();
            }else{
                new Alert(Alert.AlertType.ERROR, "Failed to delete this record").show();
            }
        }
    }

    @FXML
    void pickDate(ActionEvent event) {

    }

    @FXML
    void resetBtnOnAction(ActionEvent event) {
        refreshPage();
    }

    @FXML
    void saveBtnOnAction(ActionEvent event) {
        String id = lblAutoGeneratedId.getText();
        String paymentId = lblPaymentId.getText();
        String desc = txtDesc.getText();
        String paymentDesc = txtPaymentDesc.getText();
        String amount = txtAmount.getText();
        String remaining = lblRemainingAmount.getText();
        LocalDate date = LocalDate.parse(lblDate.getText());
        LocalDate sessionDate = datePickerForSession.getValue();

        String programName = (String) cmbPrograms.getValue();
        String patientName = (String) cmbPatients.getValue();
        String therpistName = (String) cmbTherapist.getValue();
        String status = (String) cmbStatus.getValue();

        String programId = lblProgramId.getText();
        String patientId = lblPatientId.getText();
        String therpistId = lblTherapistId.getText();

        boolean hasErrors = false;
        StringBuilder errorMessage = new StringBuilder("Please correct the following errors:\n");

        String errorStyle = "-fx-border-color: red; -fx-text-fill: black; -fx-background-color: white;";
        String defaultStyle = "-fx-border-color:  #1E90FF; -fx-text-fill: black; -fx-background-color: white;";

        if(desc.isEmpty() || paymentDesc.isEmpty()) {
            txtDesc.setStyle(errorStyle);
            txtPaymentDesc.setStyle(errorStyle);
            txtAmount.setStyle(errorStyle);
            errorMessage.append("- Details are empty\n");
            hasErrors = true;
        }else {
            txtDesc.setStyle(defaultStyle);
            txtPaymentDesc.setStyle(defaultStyle);
            txtAmount.setStyle(defaultStyle);
        }

        double paymentAmount = -1;
        try{
            paymentAmount = Double.parseDouble(amount);
            txtAmount.setStyle(defaultStyle);
        }catch (NumberFormatException e){
            txtAmount.setStyle(errorStyle);
            errorMessage.append("- Amount  is empty or not a valid number\n");
            hasErrors = true;
        }

        double remainingAmount = -1;
        remainingAmount = Double.parseDouble(remaining);

        if (hasErrors) {
            new Alert(Alert.AlertType.ERROR, errorMessage.toString()).show();
            return;
        }

        if(programName == null){
            new Alert(Alert.AlertType.ERROR, "Please select a program").show();
            return;
        }
        if(patientName == null){
            new Alert(Alert.AlertType.ERROR, "Please select a patient").show();
            return;
        }
        if(therpistName == null){
            new Alert(Alert.AlertType.ERROR, "Please select a therapist").show();
            return;
        }
        if(status == null){
            new Alert(Alert.AlertType.ERROR, "Please select the status").show();
            return;
        }

        TherapySessionDTO therapySessionDTO = new TherapySessionDTO(id,patientId,programId,therpistId,desc,date,sessionDate);
        PaymentDTO paymentDTO = new PaymentDTO(paymentId,date,paymentAmount,remainingAmount,status,id);

        boolean isSaved = bookAppointmentBO.saveSessionAndPayment(therapySessionDTO , paymentDTO);
        if (isSaved) {
            refreshPage();
            new Alert(Alert.AlertType.INFORMATION, "Session and Payment saved successfully!").show();
        } else {
            new Alert(Alert.AlertType.ERROR, "Failed to save session and payment!").show();
        }
    }

    @FXML
    void selectPRogramName(ActionEvent event) {
        try{
            String selectedProgramName = (String) cmbPrograms.getSelectionModel().getSelectedItem();
            if(selectedProgramName != null) {
                String programId = programBO.getProgramIdByName(selectedProgramName);
                lblProgramId.setText(programId);

                loadTherapistByProgram(programId);

                updateRemainingAmount();
            }
        }catch(Exception e){
            e.printStackTrace();
            new Alert(Alert.AlertType.ERROR, "Fail to load program id").show();
        }
    }

    private void loadTherapistByProgram(String programId) {
        ArrayList<String> therapistNames = therapistBO.getTherapistNamesByProgramId(programId);
        cmbTherapist.setItems(FXCollections.observableArrayList(therapistNames));
        cmbTherapist.getSelectionModel().clearSelection();
    }

    @FXML
    void selectPatientName(ActionEvent event) {
        try{
            String selectedPatientName = (String) cmbPatients.getSelectionModel().getSelectedItem();
            if(selectedPatientName != null) {
                String patientId = patientBO.getPatientIdByName(selectedPatientName);
                lblPatientId.setText(patientId);

                List<String> registeredPrograms = programBO.getRegisteredProgramsByPatientId(patientId);
                cmbPrograms.setItems(FXCollections.observableArrayList(registeredPrograms));
                cmbPrograms.getSelectionModel().clearSelection();
                lblProgramId.setText("");

                cmbTherapist.getItems().clear();
                cmbTherapist.getSelectionModel().clearSelection();
                lblTherapistId.setText("");

                updateRemainingAmount();
            }
        }catch(Exception e){
            e.printStackTrace();
            new Alert(Alert.AlertType.ERROR, "Fail to load patient id").show();
        }
    }

    private void updateRemainingAmount() {
        String patientId = lblPatientId.getText();
        String programId = lblProgramId.getText();

        if(!patientId.isEmpty() && !programId.isEmpty()) {
           /* try{
                double programFee = programBO.getProgramFeeById(programId);
                double advancePayment = registrationBO.getAdvancePaymentByPatientAndProgram(patientId , programId);
                double remainingAmount = programFee - advancePayment;

                lblRemainingAmount.setText(String.format("%.2f", remainingAmount));
            }catch(Exception e){
                e.printStackTrace();
                new Alert(Alert.AlertType.ERROR, "Fail to calculate remaining amount").show();
            }*/

            try{
                double programFee = programBO.getProgramFeeById(programId);
                double advancePayment = registrationBO.getAdvancePaymentByPatientAndProgram(patientId, programId);

                List<PaymentDTO> previousPayments = paymentBO.getPaymentsByPatientAndProgram(patientId,programId);
                double remainingAmount;

                double totalPreviousPayments = previousPayments.stream()
                        .mapToDouble(PaymentDTO::getAmount)
                        .sum();

                /*if(previousPayments.isEmpty()){
                    double advancePayment = registrationBO.getAdvancePaymentByPatientAndProgram(patientId,programId);
                    remainingAmount = programFee - advancePayment;
                }else{
                    PaymentDTO lastPayment = previousPayments.get(previousPayments.size() - 1);
                    remainingAmount = lastPayment.getRemainingAmount();
                }*/
                remainingAmount = programFee - (advancePayment + totalPreviousPayments);

                lblRemainingAmount.setText(String.format("%.2f", remainingAmount));
            } catch (Exception e) {
               e.printStackTrace();
               new Alert(Alert.AlertType.ERROR, "Fail to calculate remaining amount").show();
            }
        }
    }


    @FXML
    void selectTherapist(ActionEvent event) {
        try{
            String selectedTherapistName = (String) cmbTherapist.getSelectionModel().getSelectedItem();
            if(selectedTherapistName != null) {
                String therapistId = therapistBO.getTherapistIdByName(selectedTherapistName);
                lblTherapistId.setText(therapistId);
            }
        }catch(Exception e){
            e.printStackTrace();
            new Alert(Alert.AlertType.ERROR, "Fail to load therapist id").show();
        }
    }

    @FXML
    void selectPaymentStatus(ActionEvent event) {

    }

    @FXML
    void updateBtnOnAction(ActionEvent event) {
        String id = lblAutoGeneratedId.getText();
        String desc = txtDesc.getText();
        LocalDate date = LocalDate.parse(lblDate.getText());
        LocalDate sessionDate = datePickerForSession.getValue();

        String programName = (String) cmbPrograms.getValue();
        String patientName = (String) cmbPatients.getValue();
        String therpistName = (String) cmbTherapist.getValue();

        String programId = lblProgramId.getText();
        String patientId = lblPatientId.getText();
        String therpistId = lblTherapistId.getText();

        lblPaymentId.setText("");
        txtPaymentDesc.setText("");
        txtAmount.setText("");
        lblRemainingAmount.setText("");

        boolean hasErrors = false;
        StringBuilder errorMessage = new StringBuilder("Please correct the following errors:\n");

        String errorStyle = "-fx-border-color: red; -fx-text-fill: black; -fx-background-color: white;";
        String defaultStyle = "-fx-border-color: green; -fx-text-fill: black; -fx-background-color: white;";


        if (hasErrors) {
            new Alert(Alert.AlertType.ERROR, errorMessage.toString()).show();
            return;
        }

        if(programName == null){
            new Alert(Alert.AlertType.ERROR, "Please select a program").show();
            return;
        }
        if(patientName == null){
            new Alert(Alert.AlertType.ERROR, "Please select a patient").show();
            return;
        }
        if(therpistName == null){
            new Alert(Alert.AlertType.ERROR, "Please select a therapist").show();
            return;
        }

        TherapySessionDTO therapySessionDTO = new TherapySessionDTO(id,patientId,programId,therpistId,desc,date,sessionDate);

        boolean isUpdated = therapySessionBO.updateSession(therapySessionDTO);
        if (isUpdated) {
            refreshPage();
            new Alert(Alert.AlertType.INFORMATION, "Session  updated successfully!").show();
        } else {
            new Alert(Alert.AlertType.ERROR, "Failed to update session").show();
        }
    }

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        colSessionId.setCellValueFactory(new PropertyValueFactory<>("sessionId"));
        colDate.setCellValueFactory(new PropertyValueFactory<>("date"));
        colPatientId.setCellValueFactory(new PropertyValueFactory<>("patientId"));
        colProgramId.setCellValueFactory(new PropertyValueFactory<>("programId"));
        colTherapistId.setCellValueFactory(new PropertyValueFactory<>("therapistId"));
        colPatinet.setCellValueFactory(new PropertyValueFactory<>("patient"));
        colProgram.setCellValueFactory(new PropertyValueFactory<>("program"));
        colTherapist.setCellValueFactory(new PropertyValueFactory<>("therapist"));
        colSessionDate.setCellValueFactory(new PropertyValueFactory<>("sessionDate"));

        lblDate.setText(LocalDate.now().toString());

        String defaultStyle = "-fx-border-color:  #1E90FF; -fx-text-fill: black; -fx-background-color: white; -fx-border-width: 2px;";

        cmbPatients.setStyle(defaultStyle);
        cmbPrograms.setStyle(defaultStyle);
        cmbTherapist.setStyle(defaultStyle);
        datePickerForSession.setStyle(defaultStyle);
        txtDesc.setStyle(defaultStyle);
        txtAmount.setStyle(defaultStyle);
        txtPaymentDesc.setStyle(defaultStyle);
        datePickerForSession.setStyle(defaultStyle);
        cmbStatus.setStyle(defaultStyle);

        txtSearch.setOnAction(event -> {
            try {
                searchSession();
            } catch (Exception e) {
                e.printStackTrace();
                new Alert(Alert.AlertType.ERROR, "Error searching Session").show();
            }
        });

        try {
            loadProgramNames();
            loadPatientNames();
            loadTherapistNames();
            loadPaymentStatus();
            refreshPage();

        } catch (Exception e) {
            e.printStackTrace();
            new Alert(Alert.AlertType.ERROR, "Fail to load therapist id").show();
        }
    }

    private void loadPaymentStatus() {
        ObservableList<String> statusList = FXCollections.observableArrayList("Ongoing", "Completed");
        cmbStatus.setItems(statusList);
    }

    private void refreshPage() {
        loadNextSessionId();
        loadNextPaymentId();
        loadTableData();

        btnSave.setDisable(false);
        btnDelete.setDisable(true);
        btnUpdate.setDisable(true);

        txtDesc.setText("");
        txtPaymentDesc.setText("");
        txtAmount.setText("");

        cmbPrograms.getSelectionModel().clearSelection();
        cmbPatients.getSelectionModel().clearSelection();
        cmbTherapist.getSelectionModel().clearSelection();
        cmbStatus.getSelectionModel().clearSelection();

        cmbPrograms.setValue(null);
        cmbPatients.setValue(null);
        cmbTherapist.setValue(null);
        cmbStatus.setValue(null);
        datePickerForSession.setValue(null);

        String defaultStyle = "-fx-border-color:  #1E90FF; -fx-text-fill: black; -fx-background-color: white; -fx-border-width: 2px;";

        txtDesc.setStyle(defaultStyle);
        txtAmount.setStyle(defaultStyle);
        txtPaymentDesc.setStyle(defaultStyle);
        cmbStatus.setStyle(defaultStyle);
        cmbPatients.setStyle(defaultStyle);
        cmbTherapist.setStyle(defaultStyle);
        cmbPrograms.setStyle(defaultStyle);

        lblRemainingAmount.setText("");
        txtAmount.setDisable(false);
        txtPaymentDesc.setDisable(false);
        cmbStatus.setDisable(false);

    }

    private void loadNextPaymentId() {
        String nextPaymentId = paymentBO.getNextPaymentId();
        lblPaymentId.setText(nextPaymentId);
    }

    private void loadTableData() {
        ArrayList<TherapySessionDTO> therapySessionDTOS = therapySessionBO.getAllSessions();
        ObservableList<TherapySessionTM> therapySessionTMS = FXCollections.observableArrayList();

        for(TherapySessionDTO therapySessionDTO : therapySessionDTOS) {

            String programName = programBO.getProgramNameById(therapySessionDTO.getProgramId());
            String patientName = patientBO.getPatientNameById(therapySessionDTO.getPatientId());
            String therapistName = therapistBO.getTherapistNameById(therapySessionDTO.getTherapistId());

            TherapySessionTM therapySessionTM = new TherapySessionTM(
                    therapySessionDTO.getId(),
                    therapySessionDTO.getDate(),
                    therapySessionDTO.getPatientId(),
                    therapySessionDTO.getProgramId(),
                    therapySessionDTO.getTherapistId(),
                    patientName,
                    programName,
                    therapistName,
                    therapySessionDTO.getSessionDate()
            );
            therapySessionTMS.add(therapySessionTM);
        }
        sessionTable.setItems(therapySessionTMS);
    }

    private void loadNextSessionId() {
        String nextSessionId = therapySessionBO.getNextSessionId();
        lblAutoGeneratedId.setText(nextSessionId);
    }

    private void loadTherapistNames() {
        ArrayList<String> therapistNames = therapistBO.getAllTherapistNames();
        cmbTherapist.setItems(FXCollections.observableArrayList(therapistNames));
    }

    private void loadPatientNames() {
        ArrayList<String> patientNames = patientBO.getAllPatientNames();
        cmbPatients.setItems(FXCollections.observableArrayList(patientNames));
    }

    private void loadProgramNames() {
        ArrayList<String> programNames = programBO.getAllProgramsNames();
        cmbPrograms.setItems(FXCollections.observableArrayList(programNames));
    }

    private void searchSession() {

    }
}
